에러 : 하드웨어 오류
예외 : 소프트웨어 오류
 -일반예외 : compiler Exception 컴파일상의 예외
 -실행예외 : Runtime Exception 실행 시 발생하는 예외

예외처리 : 개발자가 발생할 예외를 미리 예상해 오류를 방지
1. try - catch : 예외가 발생될 것으로 예상되는 실행문을 감싸 catch문으로 예외를 처리한다.
                -catch에서 예외를 처리할 클래스의 객체를 만든 후 처리실행문을 작성한다.
2.사용자 정의 예외처리 : 예외클래스 생성 후 if문에 예외발생할 조건을 작성후 실행문에서 발생한 예외를 떠넘긴다.
                -else에서 정상 실행문 작성


리소스 자동닫기
    -리소스 : 데이터를 제공하는 객체,open 후에 반드시 close해야한다.
        =>자동으로 close하는 resource Aotoclose code

추상메서드 : 실체 클래스에서 사용할 표준을 제공하는 모델클래스
	- 추상메서드 :  실행문(바디)이 없다 (구현하지않는다.) 
		=> 자식 클래스에서 반드시 오버로딩
	- 객체를 생성하지 않는다. 
	-봉인된 추상 메서드 
		- sesaled 봉인된 permits 자식클래스
		- final은 더이상 상속 불가
		- non-sealed 상속가능